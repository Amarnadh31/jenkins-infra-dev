pipeline {
    agent{
        label 'AGENT-1'
    }
    options{
        disableConcurrentBuilds()
        timeout(time: 30, unit: 'MINUTES')
        ansiColor('xterm')

    }

    parameters{
        choice(name: 'ACTION', choices: ['apply', 'destroy'], description: 'select action')
    }
    stages{
        stage('init stage'){
            steps{
                withAWS(region: 'us-east-1', credentials: 'aws-creds'){
                    sh '''
                        cd 00-vpc
                        terraform init -reconfigure

                        '''

                }
            }
        }
        stage('plan '){
            steps{
                withAWS(region: 'us-east-1', credentials: 'aws-creds'){
                    
                  sh '''
                        cd 00-vpc
                        terraform plan -out=tfplan
                    '''
                    
                }
            }
        }
        stage('Apply or Destroy'){
            input {
                message "Should we continue?"
                ok "Yes, we should."
            }
            steps{
                withAWS(region: 'us-east-1', credentials: 'aws-creds'){
                    sh """
                        cd 00-vpc
                        if [ "${params.ACTION}" == "apply" ]; then
                            terraform apply -auto-approve tfplan
                        elif [ "${params.ACTION}" == "destroy" ]; then
                            terraform destroy -auto-approve
                        fi
                    """
                }

            }

        }
        stage('create sg'){
             build job: '20-sg', parameters: [string(name:'ACTION', value:'apply')], wait:false
            
        }
    }
    post{
        always{
            echo 'This section always run'
            deleteDir()
        }
        failure{
            echo " Build failed"
        }
        success{
            echo "Build run successfully"
        }
    }
}